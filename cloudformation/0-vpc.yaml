---
Resources:
  KubernetesVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.240.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: kubernetes
  KubernetesPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 3, 6 ]]
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private-a
  KubernetesPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 3, 6 ]]
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private-b
  KubernetesPrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 3, 6 ]]
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private-c
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTPS'
      SecurityGroupIngress:
        - CidrIp: !GetAtt KubernetesVPC.CidrBlock
          Description: 'Allow inbound HTTPS'
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - CidrIp: !GetAtt KubernetesVPC.CidrBlock
          Description: 'Allow outbound HTTPS'
          IpProtocol: tcp
          FromPort: 1024
          ToPort: 65535
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: vpc-endpoint
  SSMVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      SubnetIds:
        - !Ref KubernetesPrivateSubnetA
        - !Ref KubernetesPrivateSubnetB
        - !Ref KubernetesPrivateSubnetC
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
      VpcId: !Ref KubernetesVPC
  EC2MessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      SubnetIds:
        - !Ref KubernetesPrivateSubnetA
        - !Ref KubernetesPrivateSubnetB
        - !Ref KubernetesPrivateSubnetC
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
      VpcId: !Ref KubernetesVPC
  SSMMessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      SubnetIds:
        - !Ref KubernetesPrivateSubnetA
        - !Ref KubernetesPrivateSubnetB
        - !Ref KubernetesPrivateSubnetC
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
      VpcId: !Ref KubernetesVPC
Outputs:
  KubernetesVPCId:
    Value: !GetAtt KubernetesVPC.VpcId
  KubernetesPrivateSubnetAId:
    Value: !GetAtt KubernetesPrivateSubnetA.SubnetId
  KubernetesPrivateSubnetBId:
    Value: !GetAtt KubernetesPrivateSubnetB.SubnetId
  KubernetesPrivateSubnetCId:
    Value: !GetAtt KubernetesPrivateSubnetC.SubnetId
