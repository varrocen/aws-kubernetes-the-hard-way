---
Parameters:
  MyRangeIP:
    Type: String
    Default: ''

Conditions:
  AllowPublicSSHAccess: !Not [ !Equals [ '', !Ref MyRangeIP ] ]

Resources:
  KubernetesVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.240.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: kubernetes

  KubernetesPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 6, 5 ] ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-public-a
  KubernetesPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 6, 5 ] ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-public-b
  KubernetesPublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 6, 5 ] ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-public-c

  KubernetesPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 6, 5 ] ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private-a
  KubernetesPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 6, 5 ] ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private-b
  KubernetesPrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 6, 5 ] ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private-c

  KubernetesPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-public
  PublicASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref KubernetesPublicRouteTable
      SubnetId: !Ref KubernetesPublicSubnetA
  PublicBSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref KubernetesPublicRouteTable
      SubnetId: !Ref KubernetesPublicSubnetB
  PublicCSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref KubernetesPublicRouteTable
      SubnetId: !Ref KubernetesPublicSubnetC

  KubernetesPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private
  PrivateASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref KubernetesPrivateRouteTable
      SubnetId: !Ref KubernetesPrivateSubnetA
  PrivateBSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref KubernetesPrivateRouteTable
      SubnetId: !Ref KubernetesPrivateSubnetB
  PrivateCSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref KubernetesPrivateRouteTable
      SubnetId: !Ref KubernetesPrivateSubnetC

  KubernetesInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: kubernetes
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref KubernetesVPC
      InternetGatewayId: !Ref KubernetesInternetGateway
  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref KubernetesInternetGateway
      RouteTableId: !Ref KubernetesPublicRouteTable

  KubernetesNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: private
      SubnetId: !Ref KubernetesPrivateSubnetA
      Tags:
        - Key: Name
          Value: kubernetes
  NatGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref KubernetesNatGateway
      RouteTableId: !Ref KubernetesPrivateRouteTable

  KubernetesPublicNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-public
  PublicSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      SubnetId: !Ref KubernetesPublicSubnetA
  PublicSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      SubnetId: !Ref KubernetesPublicSubnetB
  PublicSubnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      SubnetId: !Ref KubernetesPublicSubnetC

  PublicHTTPInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
  PublicHTTPSInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110
  PublicSSHInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Condition: AllowPublicSSHAccess
    Properties:
      CidrBlock: !Ref MyRangeIP
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 120
  PublicTCPInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 130

  PublicHTTPOnboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      Egress: true
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
  PublicHTTPSOnboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      Egress: true
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110
  PublicTCPOnboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      Egress: true
      PortRange:
        From: 32768
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 120
  PublicSSHOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      NetworkAclId: !Ref KubernetesPublicNetworkACL
      Egress: true
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 130

  KubernetesPrivateNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private
  PrivateSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref KubernetesPrivateNetworkACL
      SubnetId: !Ref KubernetesPrivateSubnetA
  PrivateSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref KubernetesPrivateNetworkACL
      SubnetId: !Ref KubernetesPrivateSubnetB
  PrivateSubnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref KubernetesPrivateNetworkACL
      SubnetId: !Ref KubernetesPrivateSubnetC

  PrivateSSHInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      NetworkAclId: !Ref KubernetesPrivateNetworkACL
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
  PrivateTCPInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      NetworkAclId: !Ref KubernetesPrivateNetworkACL
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110

  PrivateHTTPOnboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      NetworkAclId: !Ref KubernetesPrivateNetworkACL
      Egress: true
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
  PrivateHTTPSOnboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      NetworkAclId: !Ref KubernetesPrivateNetworkACL
      Egress: true
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110
  PrivateTCPOnboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      NetworkAclId: !Ref KubernetesPrivateNetworkACL
      Egress: true
      PortRange:
        From: 32768
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 120

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow inbound HTTPS'
      SecurityGroupIngress:
        - CidrIp: !GetAtt KubernetesVPC.CidrBlock
          Description: 'Allow inbound HTTPS'
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - CidrIp: !GetAtt KubernetesVPC.CidrBlock
          Description: 'Deny all outbound'
          IpProtocol: tcp
          FromPort: 1
          ToPort: 1
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: vpc-endpoint
  SSMVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      SubnetIds:
        - !Ref KubernetesPrivateSubnetA
        - !Ref KubernetesPrivateSubnetB
        - !Ref KubernetesPrivateSubnetC
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
      VpcId: !Ref KubernetesVPC
  EC2MessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      SubnetIds:
        - !Ref KubernetesPrivateSubnetA
        - !Ref KubernetesPrivateSubnetB
        - !Ref KubernetesPrivateSubnetC
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
      VpcId: !Ref KubernetesVPC
  SSMMessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      SubnetIds:
        - !Ref KubernetesPrivateSubnetA
        - !Ref KubernetesPrivateSubnetB
        - !Ref KubernetesPrivateSubnetC
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
      VpcId: !Ref KubernetesVPC

Outputs:
  KubernetesVPCId:
    Value: !GetAtt KubernetesVPC.VpcId
  KubernetesPublicSubnetAId:
    Value: !GetAtt KubernetesPublicSubnetA.SubnetId
  KubernetesPublicSubnetBId:
    Value: !GetAtt KubernetesPublicSubnetB.SubnetId
  KubernetesPublicSubnetCId:
    Value: !GetAtt KubernetesPublicSubnetC.SubnetId
  KubernetesPrivateSubnetAId:
    Value: !GetAtt KubernetesPrivateSubnetA.SubnetId
  KubernetesPrivateSubnetBId:
    Value: !GetAtt KubernetesPrivateSubnetB.SubnetId
  KubernetesPrivateSubnetCId:
    Value: !GetAtt KubernetesPrivateSubnetC.SubnetId
