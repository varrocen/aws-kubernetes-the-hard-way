---
Resources:
  KubernetesVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.240.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: kubernetes
  KubernetesPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 3, 6 ]]
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private-a
  KubernetesPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 3, 6 ]]
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private-b
  KubernetesPrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt KubernetesVPC.CidrBlock, 3, 6 ]]
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes-private-c

  KubernetesNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: kubernetes
  KubernetesSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref KubernetesNetworkACL
      SubnetId: !Ref KubernetesPrivateSubnetA
  KubernetesSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref KubernetesNetworkACL
      SubnetId: !Ref KubernetesPrivateSubnetB
  KubernetesSubnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref KubernetesNetworkACL
      SubnetId: !Ref KubernetesPrivateSubnetC
  ICMPInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      Icmp:
        Code: -1
        Type: -1
      NetworkAclId: !Ref KubernetesNetworkACL
      Protocol: 1
      RuleAction: allow
      RuleNumber: 100
  SSHInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      NetworkAclId: !Ref KubernetesNetworkACL
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110
  HTTPInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      NetworkAclId: !Ref KubernetesNetworkACL
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 120
  HTTPSInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      NetworkAclId: !Ref KubernetesNetworkACL
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 130
  CustomTCPInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      NetworkAclId: !Ref KubernetesNetworkACL
      PortRange:
        From: 32768
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 140
  ICMPOnboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      Egress: true
      Icmp:
        Code: -1
        Type: -1
      NetworkAclId: !Ref KubernetesNetworkACL
      Protocol: 1
      RuleAction: allow
      RuleNumber: 100
  SSHOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      Egress: true
      NetworkAclId: !Ref KubernetesNetworkACL
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110
  HTTPOnboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      Egress: true
      NetworkAclId: !Ref KubernetesNetworkACL
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 120
  HTTPSOnboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      Egress: true
      NetworkAclId: !Ref KubernetesNetworkACL
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 130
  CustomTCPOnboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !GetAtt KubernetesVPC.CidrBlock
      Egress: true
      NetworkAclId: !Ref KubernetesNetworkACL
      PortRange:
        From: 32768
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 140

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow inbound HTTPS'
      SecurityGroupIngress:
        - CidrIp: !GetAtt KubernetesVPC.CidrBlock
          Description: 'Allow inbound HTTPS'
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - CidrIp: !GetAtt KubernetesVPC.CidrBlock
          Description: 'Deny all outbound'
          IpProtocol: tcp
          FromPort: 1
          ToPort: 1
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: vpc-endpoint
  SSMVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      SubnetIds:
        - !Ref KubernetesPrivateSubnetA
        - !Ref KubernetesPrivateSubnetB
        - !Ref KubernetesPrivateSubnetC
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
      VpcId: !Ref KubernetesVPC
  EC2MessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      SubnetIds:
        - !Ref KubernetesPrivateSubnetA
        - !Ref KubernetesPrivateSubnetB
        - !Ref KubernetesPrivateSubnetC
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
      VpcId: !Ref KubernetesVPC
  SSMMessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      SubnetIds:
        - !Ref KubernetesPrivateSubnetA
        - !Ref KubernetesPrivateSubnetB
        - !Ref KubernetesPrivateSubnetC
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
      VpcId: !Ref KubernetesVPC

Outputs:
  KubernetesVPCId:
    Value: !GetAtt KubernetesVPC.VpcId
  KubernetesPrivateSubnetAId:
    Value: !GetAtt KubernetesPrivateSubnetA.SubnetId
  KubernetesPrivateSubnetBId:
    Value: !GetAtt KubernetesPrivateSubnetB.SubnetId
  KubernetesPrivateSubnetCId:
    Value: !GetAtt KubernetesPrivateSubnetC.SubnetId
